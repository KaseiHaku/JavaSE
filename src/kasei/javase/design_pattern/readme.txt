创建型模式：创建对象时不再由我们直接实例化对象，而是根据传入参数，由程序创建对象并返回
    Factory: 简单工厂模式
        不直接 new 实例，而是给一个 factory 实例传参数，表明所需的实例，由 factory 实例创建一个所需的实例并返回
        作用：
            统一创建实例
    AbstractFactory: 抽象工厂模式：
        工厂的工厂，给 superFactory 实例传所需的工厂类型，由 superFactory 实例创建一个 factory 实例并返回
    Singleton: 单例模式
        1. 私有化构造器：private SingletonClass(){}
        2. 类中创建唯一的私有实例： private SingletonClass singletonInstance;
        3. 提供公共方法给外部获取私有实例： public SingletonClass getInstance(){}
    Builder: 建造者模式
        一个实例由很多个实例组合而成，例如如：肯德基套餐，一个 菜单 Builder 可以创建一个 SetMenu， SetMenu 中包含很多很多种食物
        作用：
            组合多个单一实例，来创建一个组合实例
    Prototype: 原型模式
        1. 编写一个抽象类：该类中包含了能用到的所有方法的默认实现，子类可以复写该类

结构型模式：
    帮助将多个对象组织成更大的结构
    主要是 类 和 类 之间的关系，所以只有以下几种情况: 组合，继承，内嵌

    Adapter: 适配器模式
        1. 创建两个不同的功能类 A, B
        2. 创建一个适配器类 Adapter ，Adapter 中包含 A，B 的实例 a，b，当传入的参数需要 A 功能时，那就调用 a 实例的方法
        作用:
            伪装一个非本继承体系中的类到当前继承体系统中
    Bridge: 桥接模式，即：把一个 对象 中可以相互独立变化的维度，抽象成一个接口
        ClassA 和 ClassB 都有一个同名的 method xxx()，把同名的 method 提取到一个 interface M 中，
        ClassA#xxx() 的逻辑写到 M 的实现类 M1#xxx() 中，ClassA 组合一个 M1 的实例，将 ClassA#xxx() 的调用委托给 M1 实例执行
        ClassB 同理
    Decorate: 装饰器模式：
        装饰器类 Decorate 包含被装饰类 A 的实例，在 A 的方法外围添加自己的代码
    Proxy: 代理模式
        方式1：代理类 A，被代理类 B，
            同时实现接口 I，A 中组合一个 B 类的对象，
            且 B 中所有的方法，在 A 中都有同名的方法，
            在程序中需要 B 的时候返回 A，这就叫代理了
        方式2：代理类 A，被代理对类 B，
            A 是 B 的子类，也 tm 叫被代理了（但是这种方法更好）
    Composite: 组合模式
        实例中包含其他实例
    Flyweight: 享元（共享实例）模式，即：池化
        创建一个 Set 包含已经创建的不同种类的实例，如果新请求的实例类型已经在 Set 中存在，则不再新建实例，而是直接返回 Set 中的实例
    Facade: 外观模式
        当有多个实例的时候，创建一个外观实例去调用多个实例的方法，而不是各自去调用


行为型模式：
    用于帮助系统间各对象的通信
    粒度为 Method 级别，所以涉及到 Method 的以下几个概念:
        存放位置: 
            当前类
            剥离到其他类/接口中
        入参: 
            特别注意调用方将 this 作为入参的情况，可以使用 方法重载（Overload）来规避大量的 if/else 判断
        回参：
            特别注意返回 this 的情况
        调用方式:
            - 封装内部调用细节
            - 多个对象 method 之间，调用链路 的设计
    

    Strategy: 策略模式
        给一个调用类 Invoke，传不同类的实例，那么当调用 Invoke 方法时，会出现不同的结果，相当于继承结构中的 多态
    Template: 模板方法模式
        在一个抽象类中定义默认方法，调用的时候都是调用改抽象类，实例由子类向上造型产生
    Observer: 观察者模式
        在一个类中保存一个 List 存放所有 Observers，当类发生改变时，调用所有 Observers 的一个方法
    Chain: 责任链模式
        多个类实现同一个接口，依次处理同一个实例
    Iterator: 迭代器模式
    
    Command: 命令模式
        每个命令子类，包含该命令所需的参数，并存在一个 execute() 方法，
    Memento: 备忘录模式
        提取当前实例的状态，保存到外部，比如 JSON ，在适当的时候可以恢复实例某一时刻的状态 
    State: 状态模式
        提取状态到独立的接口，状态实现可以修改状态拥有者的属性，这是跟 Strategy 模式最主要的区别
    Visitor: 访问者模式
        比如电脑是访问者本身，那么外设就是被访问的实例，外设提供统一的接口给电脑（USB）访问
        Visitor 中有多个方法 visit(Master), 
        Master 中有一个 acceptVisit(Visitor ) 方法，用于接受一个 vistor，并将自身(this) 作为参数,调用 Visitor#visit(thisMaster) 方法
    Mediator: 中介者模式
        多个实例相互调用，形成网状结构，采用改模式，能使拓扑图变为星型，相当于交换机的角色
        所有其他 Class 都持有一个相同 Mediator 实例，其他所有 Class 的方法，都调用 Mediator 进行操作
    Interpreter: 解释器模式
        多用于编译器，搞不懂， （终结符，非终结符）; (词法分析 -> 语法分析 -> 代码生成 -> 连接)
并发型模式:


线程池模式:


设计模式原则：
    A. 对扩展开放，对修改关闭。即严禁修改已经存在的类的代码
    B. 接口（父类）可以存在的地方，子类一定可以存在
        1. 子类不能覆盖父类的非抽象方法
        2. 子类重载父类方法时，方法的形参必须比父类方法的形参更宽松（比如：必须是父类形参的父类）
        3. 子类实现父类抽象方法时，返回值必须比父类方法的返回值更严格（比如：必须是父类返回值的子类）
    C. 当代码分层时（如 Controller/Service/Repository），层次之间代码调用，应该调用接口，而不是实现类
    D. 接口设计时，尽量保证单个接口功能的单一性
    E. 类设计时，尽量不要在局部变量中使用其他类，而只在 成员变量、方法参数、方法返回值中使用其他类
    F. 类设计时，尽量保证类功能的单一性
    G. 尽量使用组合，而不是继承
    H. 如果必须使用继承，那么必须符合以下结构
        1. 构造函数访问修饰符必须为 protected 
        2. 必须是无参构造函数
        3. 设置 builder 或者 factory 方法用于构造实例

0. 单一职责原则(Single Responsibility Principle)
    指一个类的变化只能由一件事触发，即只有一个原因会导致类的改动
    
1. 开闭原则（Open Close Principle）
 开闭原则的意思是：对扩展开放，对修改关闭。
 在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。
 简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。

2. 里氏代换原则（Liskov Substitution Principle）
 里氏代换原则是面向对象设计的基本原则之一。
 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。
 LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。
 里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。

3. 依赖倒转原则（Dependence Inversion Principle）
 这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。

4. 接口隔离原则（Interface Segregation Principle）
 这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。
 它还有另外一个意思是：降低类之间的耦合度。
 由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。

5. 迪米特法则，又称最少知道原则（Demeter Principle）
 最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。

6. 合成复用原则（Composite Reuse Principle）
 合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。

9. 设计模式 终极奥义 插件模式（可拔插设计）
    通过 服务 拔插              Spring Cloud
    通过 依赖 拔插              Spring Boot
    通过 配置文件 拔插           Spring
    通过 接口/实现类 拔插        基于接口开发

