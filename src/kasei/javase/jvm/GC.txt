什么是 GC?
    Java 中用于自动回收不再使用的实例的内存的线程

如何判断对象是否可回收？
    可达性分析法：以图论来理解，就是从 GC Root 到这个对象不可达时，回收这个对象

GC ROOT 有哪些？
    本地方法栈中 JNI（即 Native 方法）引用的实例
    方法区中静态成员引用的实例
    方法区中 final 常量引用的实例
    栈帧中的本地变量中引用的实例（对象）

GC Algorithm：
    标记-复制法：
    标记-清除法：
    标记-整理法：
    
GC 执行算法：
    古典时代：
        Serial(年轻代), SerialOld(老年代)                   # 垃圾回收时暂停业务线程，单个 GC 线程执行垃圾回收
        Parallel Scavenge(年轻代), Parallel Old(老年代)     # 垃圾回收时暂停业务线程，多个 GC 线程执行垃圾回收
    中古时代：
        ParNew(年轻代):                            # 只适用于 年轻代，并行的 mark-copy 算法，GC 过程也会 Stop the World；
        CMS(老年代): Concurrent Mark Sweep         # 只适用于 老年代，标记时不暂停业务线程，不进行 Compact，最新 JDK 已删除，mark-sweep 算法，发生一次 Full GC
                                                  # 1. initial-mark  stop-the-world 标记那些直接被 GC root 引用或者被年轻代存活对象所引用的所有对象
                                                  # 2. concurrent-mark 遍历老年代，然后标记所有存活的对象，它会根据上个阶段找到的 GC Roots 遍历查找
                                                  # 3. Concurrent Preclean：这也是一个并发阶段，与应用的线程并发运行，并不会 stop 应用的线程。
                                                  #    在并发运行的过程中，一些对象的引用可能会发生变化，但是这种情况发生时，JVM 会将包含这个对象的区域（Card）标记为 Dirty，
                                                  #    这也就是 Card Marking
                                                  # 4. Concurrent Abortable Preclean
                                                  # 5. Final Remark: 这是第二个 STW 阶段，也是 CMS 中的最后一个，这个阶段的目标是标记所有老年代所有的存活对象，
                                                  #    由于之前的阶段是并发执行的，gc 线程可能跟不上应用程序的变化，为了完成标记老年代所有存活对象的目标，STW 就非常有必要了
                                                  # 6. Concurrent Sweep
                                                  # 7. Concurrent Reset
    现代：
        G1: 不再是连续的 eden survivor1 survivor2 tenured 内存结构，而是跟硬盘一样进行了分区，每个区大小相同
            Fully Young GC：
            Mixed GC：包含一次 Fully Young GC
    未来：
        ZGC: Oracle 实现的，基于 指针位操作
        Shenandoah: Red Hat 实现的， 基于 对象头
    



GC 种类：
    收集器             串行、并行or并发       新生代/老年代     算法              目标              适用场景
    Serial              串行                  新生代         复制算法        响应速度优先      单CPU环境下的Client模式
    ParNew              并行                  新生代         复制算法        响应速度优先      多CPU环境时在Server模式下与CMS配合
    Parallel Scavenge   并行                  新生代         复制算法        吞吐量优先        在后台运算而不需要太多交互的任务
    
    Serial Old          串行                  老年代         标记-整理       响应速度优先      单CPU环境下的Client模式、CMS的后备预案
    Parallel Old        并行                  老年代         标记-整理       吞吐量优先        在后台运算而不需要太多交互的任务
    CMS                 并发                  老年代         标记-清除       响应速度优先      集中在互联网站或B/S系统服务端上的Java应用
    G1                  并发                  both       标记-整理+复制算法  响应速度优先      面向服务端应用，将来替换CMS


JDK 各版本 GC ：
    jdk8    PS Scavenge(young)  PS MarkSweep(old)
    jdk9    G1(young & old)


Java 的引用类型有哪些？
    StrongReference 强引用：不会被回收 GC 回收，当内存空间不足，抛出 OutOfMemoryError 错误
    SoftReference 软引用：内存空间足够时，不会被 GC 回收
    WeakReference 弱引用: GC 线程扫描到 弱引用，直接回收内存
    PhantomReference 虚引用：必须和 ReferenceQueue 一起使用


调用 System.gc(); 会有什么效果？
    建议 GC 线程执行垃圾回收，至于到底执不执行，GC 自己说了算


什么是内存泄漏？
    指不再使用的实例所占用内存，得不到回收
    Java 中的内存泄漏是指：当实例不再使用，且下一次 GC 无法回收该实例的内存时，就发生了内存泄漏，

GC 日志怎么查看？
    配置 jvm 启动参数，将 GC 日志输出到控制台或文件中

