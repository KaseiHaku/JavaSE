/******************************* Java Foundation ************************/
Java 中的字符编码问题
    不管 java 源文件的字符编码格式是何种字符集，当编译成 .class 文件后，编码格式都转化成 unicode(UTF-16) 格式
    Java String 类型在内存中也是使用 unicode 编码的，只有在需要向其他地方输出的时候才转换成适配输出环境的编码格式
    
Java 中对象全等性判断：
    1. obj.equals(obj2) 返回 true
    2. 对象的 hashCode() 方法一致
    3. 特别注意包装类的使用，
        比如 int i=1; Integer j=1; list.remove();的时候，传入 i 和 j 的效果不同，因为 j 是对象，会用对象的方式进行全等判断
    4. 查看 obj 对象在内存中的地址
        System.identityHashCode(obj);  // 可以用与替代 == 

Java 中获取系统参数
    System.getProperties(); 方法上方包含所有属性 key
    System.identityHashCode(obj);  查看 obj 对象在内存中的地址

Java 中的缺点：
    继承的缺点：不灵活，修改父类需要修改对应子类
    Solution: 使用组合和委托的方式避开继承，然后使用 Label 来对 class 分类，例如 Java 中的 Interface
    封装的缺点：因为 Java 实例（对象）是传引用的，不是传值，所以会造成方法中对实例修改后影响原本的实例
    Solution: 语言特性，没有办法，或许可以先 clone 一个实例再执行操作
    
Java 中类和对象的理解
    类：一个事物的配置，相当于数据库中的表结构
    对象：一个事物的具体配置，相当于数据库中一张表中的记录
    
Package 相关的基础知识
    import kasei.serlet.*;  // 该导包语句只能导入当前包中的类，不会级联导入子包中的类
    
Function 相关的基础知识
    1、Java 中所有函数都有两个隐式参数 this  super，其中this永远指向当前对象，super指向当前对象内包含的父类对象hr，hr是直接父类的对象
    2、所有 private 方法都隐式的声明为 final 方法
    3、所有的构造函数第一行代码永远是 super(args); 如果没有，说明隐式调用父类无参构造函数

GC 相关的基础知识
    JVM 有一个守护进程 System.gc();该守护进程：请求 JVM 进行垃圾回收，finalize()通常用于释放对象持有的资源
    当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。
    protected void finalize() throws Throwable { } //一旦垃圾回收器准备好释放对象内存是，将首先调用该方法，并在下一次垃圾回收时才真正回收内存

Stream 流
    Java 中新建的流必须进行手动关闭，并遵循谁打开（创建）谁关闭原则，即 被调函数参数中的流实例不要在被调函数中关闭


ClassLoad 相关的基础知识
    加载：
        将类的class文件读入内存，并创建与之对应 的 java.lang.Class 的实例
    链接：
        验证：文件格式、语法、语义等验证
        准备：为static 修饰的静态域做默认初始化，并在方法区分配内存空间
        解析：将符号引用替换为直接引用
    （显示）初始化：
        创建类的实例
        访问类或接口的静态变量（final static 修饰的常量不会对类进行显示初始化）
        调用类的静态方法
        反射（Class.forName(packageName.className)）
        初始化类的子类
        java虚拟机启动时被标明为启动类的类
    
Java 变量：
    标识符：$  数字   _  英文字母（不能以数字开头）
    类型：
        局部变量：定义于方法或语句块；使用之前必须要手动初始化，否则编译出错
        成员变量（实例变量）：定义于类里面、方法外面，从属于对象；系统自动初始化
        静态变量（类变量）：static 修饰，从属于类

    java 基本数据类型
        数据类型            默认值                 包装类         占字节数
        boolean             false               Boolean         视编译环境而定
        char                '\u0000'(null)      Character		2

        byte                0b00000000          Byte			1
        short               0                   Short			2
        int                 0（直接常量默认类型）  Integer			4
        long                0l                  Long			8

        float               0.0f                Float			4
        double              0.0d（直接常量默认类型）Double			8

        引用类型             null				无

java.lang.NullPointException
    Boolean bool = "".equals(str);  // 避免空指针检查
    String result = (str==null) ? "" : str.substring(1, 4); // 使用三目运算比使用 if 判断要简洁明了

Java 内部类：静态内部类、普通内部类、局部内部类、匿名内部类
    访问修饰符：外部类：public, default；内部类：public, protect, default, private
    访问权限：外部类访问内部类，不受访问修饰符控制，都可访问；其他类访问内部类，先看内部类本身的修饰符，然后在看内部类里面的方法和字段的修饰符
    
JavaBean 规范：
    1. 必须是个公共类： public class MyJavaBean{}
    2. 必须有一个公用的空的构造函数： public MyJavaBean(){}
    3. 所有实例变量都必须是私有的： private String str;
    4. 属性名和 getter setter 方法名的对应关系
        4.1 属性名前两个字母小写，例如：abc，那么对应的 getter setter 如下： getAbc() setAbc()
        4.2 属性名第二个字母大写，例如：aBc，那么对应的 getter setter 如下： getaBc() setaBc()     不推荐使用
        4.3 属性名前两个字母大写，例如：ABc，那么对应的 getter setter 如下： getABc() setABc()     不推荐使用
        4.4 属性名第一个大写，第二个小写，例如：Abc，不规范命名，会出错
        4.5 属性名禁止使用 is 开头, 例如: isActive, isXxx, ...; 因为 isActive 对应的 getter setter 如下: getActive() setActive(), 与习惯不符, 容易出错

Java 项目包结构：
    kasei                               # 根包
    kasei.controller                    # Web 访问层
    kasei.service                       # 业务服务层
    kasei.repository                    # 数据持久层
    kasei.extension                     # Global 扩展包
    kasei.utility                       # Global 工具包
    kasei.exception                     # Global 异常包
    
API(Application Programming Interface):   
    调用者 通过接口调用 实现方 的代码，其中接口在实现方的叫 API
    应用场景：JDK 中各种类的方法
    
SPI(Service Provider Interface):
    调用者 通过接口调用 实现方 的代码，其中接口在调用方的叫 SPI
    应用场景：插件，由主程序调用约定接口，具体实现在插件中，例如：JDBC
    实现方式：
        META-INF/services 目录下创建一个以 "服务接口" 全类名命名的文件
        该文件中每一行都是一个当前 "服务接口" 实现类的全类名
        调用者 通过接口调用时，会去读取这些全类名，根据要求找到对应的实现类，并通过反射进行实例化，然后调用

volatile 关键字：
    因为 jvm 运算时，会将 heap 中的对象复制一份到 线程栈中，线程中所有的操作都仅针对线程栈中的变量，而不会直接修改 heap 中的值，
    volatile 关键字表示：
        线程中每次读取该变量都从 heap 中读取，而不是使用线程栈中的值
        线程对该变量执行写入操作时，同时更新 heap 中的值，而不是等线程结果再同步
    
    volatle 对 i++; 操作无效的原因：
        i++; 不是原子性操作，该操作分为三步： 
            a: 从内存中读取 i 的值；
            b: 将 i 的值 +1；
            c：将 i 的值写回内存；
        出错的执行步骤：
            1. 线程 A 读取 i 的值，然后立马被阻塞
            2. 线程 B 读取 i 的值，+1，并写回内存；写回内存的同时会使 线程 A 的缓存失效，CPU 硬件实现
            3. 由于线程 A 读取 i 值的操作已经执行过了，所以不会再执行一遍读的操作，线程 B 导致的线程 A 缓存的失效，并不影响已经读取的值，导致错误
            
Reference:
    StrongReference: 
        一个 instance 具有强引用，如果内存空间不足，那么会抛出 OutOfMemoryError 错误
    SoftReference: 
        一个 instance 只具有软引用，内存空间充足，不回收；内存空间不足，则回收 instance，并把 软引用本身 放到 ReferenceQueue 中
    WeakReference: 
        一个 instance 只具有弱引用，不管内存空间是否足够，都回收，
        如果 instance 被回收，那么把 弱引用本身 放到 ReferenceQueue 中
    PhantomReference: 
        一个 instance 只具有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收，
        和 软引用/弱引用的区别是，虚引用必须和 ReferenceQueue 一起使用，
        虚引用指向的对象被回收，虚引用本身被放入 ReferenceQueue 中

Annotation Processor: 注解处理器: 在 编译阶段执行指定的 java 代码，可以动态生成 java 代码
    注解处理器的执行顺序:
        第一种: xxx.jar!/META-INF/services/javax.annotation.processing.Processor  文件中定义的顺序
        第二种: javac 命令行参数中指定的顺序
               shell> javac -processor class1,class2,...       # 指定 使用哪些 注解处理器
                            -processorpath path                # 指定 注解处理器 扫描的路径
         
    
    注解处理器执行步骤:
        Round       Input                   Output
        1           origin source           round1Out
        2           round1Out               None
        3           None                    None            # 当 Input 为 None 时结束
    

    

